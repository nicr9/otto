#! /usr/bin/python2.7
import os
import os.path
import imp
import json
import sys
import argparse

from subprocess import call as shcall
from otto.cmds import DEFAULT_CMDS

OTTO_DESC = "A workflow automator written in Python."
USAGE = """Usage:
  $ otto COMMAND [ARG1 ARG2 ... ARGN]"""

DEBUG = True
DEFAULT_CONFIG = {}
GLOBAL_CMDS_DIR = os.path.expanduser('~/.otto')
GLOBAL_CONFIG = os.path.join(GLOBAL_CMDS_DIR, 'config.json')
LOCAL_CMDS_DIR = os.path.join(os.getcwd(), '.otto')
LOCAL_CONFIG = os.path.join(LOCAL_CMDS_DIR, 'config.json')
RES_DIR = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'otto_res')

class OttoDispatcher(object):
    def __init__(self):
        self.config = DEFAULT_CONFIG
        self.cmds = DEFAULT_CMDS

        self.update_config(GLOBAL_CONFIG)

        self.update_config(LOCAL_CONFIG)
        self.local_cmds()

    def update_config(self, path):
        head, tail = os.path.split(path)
        if os.path.isdir(head):
            if os.path.isfile(path):
                with open(path, 'r') as file_:
                    self.config.update(json.load(file_))

    def local_cmds(self):
        if os.path.isdir(LOCAL_CMDS_DIR):
            if 'local_cmds' in self.config:
                for module, path in self.config['local_cmds'].iteritems():
                    try:
                        temp = imp.load_source(
                                module,
                                os.path.join(LOCAL_CMDS_DIR, path)
                                )
                        cmd_class = getattr(temp, module.capitalize(), None)
                        if cmd_class is None:
                            print module, "could not be loaded from .otto/"
                        else:
                            self.cmds[module] = cmd_class
                    except Exception as e:
                        raise e

    def list_cmds(self):
        for key in self.cmds:
            print "*", key

    def print_docs(self, cmd):
        docs = self.cmds[cmd].__doc__
        if docs is None:
            print "Whoops, this command doesn't seem to have a docstring."
        else:
            print docs

    def handle(self, cmd, args):
        if cmd in self.cmds:
            self.cmds[cmd]().run(*args, **self.config.get(cmd, {}))

        self.tone()

    def tone(self):
        if 'tone' in self.config:
            path = os.path.join(RES_DIR, self.config['tone'])
            if os.path.isfile(path):
                shcall(['aplay', path])

def bootstrap(cmd, args, opts):
    otto = OttoDispatcher()
    if opts['list_cmds']:
        otto.list_cmds()
    elif opts['cmd_docs']:
        otto.print_docs(cmd)
    else:
        otto.handle(cmd, args)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=OTTO_DESC)

    parser.add_argument('-l', action='store_true', help="List available commands", dest='list_cmds')
    parser.add_argument('-d', action='store_true', help="print out the docstring for the specified command", dest='cmd_docs')
    parser.add_argument(action='store', nargs='?', default='', type=str, help="Workflow to run", metavar='command', dest='cmd')
    parser.add_argument(action='store', nargs='*', type=str, help="Arguments for command", metavar='ARG', dest='args')

    namespace = parser.parse_args()

    cmd = namespace.cmd
    args = namespace.args
    opts = {
            'list_cmds': namespace.list_cmds,
            'cmd_docs': namespace.cmd_docs,
            }

    bootstrap(cmd, args, opts)
